from aiogram import Router, types, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state, State, StatesGroup

from sqlalchemy import select

from Database.database import async_session
from Database.tableModels import (
    checklistTable, foodAmountTable,
    locationTable
)
from Keyboards.locationsMenuKeyboard import (
    keyboard_locations_menu,
    keyboard_back_menu
)
from Keyboards.mainMenuKeyboard import keyboard_main_menu


# locations maybe can be moved in filter
locations = [b[0].text for b in keyboard_locations_menu.keyboard]

checklist_router = Router(name="locations_router")


class FSMFillCheklist(StatesGroup):
    # Creating instances of the State class, sequentially
    # listing the possible states it will be in
    # bot at different moments of user interaction
    location_choice_state = State()
    upload_photo_state = State()
    fill_info_state = State()
    choose_location_for_checklist = State()


@checklist_router.message(
    F.text == "üîç–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç",
    StateFilter(default_state)
)
async def start_check_checklist(message: types.Message, state: FSMContext):
    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–µ–∫-–ª–∏—Å—Ç:",
        reply_markup=keyboard_locations_menu
    )
    await state.set_state(FSMFillCheklist.choose_location_for_checklist)


@checklist_router.message(
    F.text.in_(locations),
    StateFilter(FSMFillCheklist.choose_location_for_checklist)
)
async def print_info_checklist(message: types.Message, state: FSMContext):
    async with async_session() as session:
        stmt = (
            select(foodAmountTable.food_amount)
            .join(locationTable)
            .where(locationTable.location_name == message.text)
        )
        result = await session.execute(stmt)
        food_result = result.scalars().all()

    async with async_session() as session:
        stmt = (
            select(checklistTable)
            .join(locationTable)
            .where(locationTable.location_name == message.text)
        )
        result = await session.execute(stmt)
        consumables_result = result.scalars().all()

    await message.reply(
        f"–û—Å—Ç–∞—Ç–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {food_result[0]}\n\n" \
        + "–û—Å—Ç–∞—Ç–∫–∏ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–æ–≤\n" \
        + f"–í–æ–¥–∞: {consumables_result[0].bottles_of_water}\n" \
        + f"–ë—É–º–∞–≥–∞ —Ç—É–∞–ª–µ—Ç–Ω–∞—è: {consumables_result[0].toilet_paper}\n" \
        + f"–°–∞–ª—Ñ–µ—Ç–∫–∏: {consumables_result[0].napkins}\n" \
        + f"–ê–Ω—Ç–∏—Å–µ–ø—Ç–∏–∫: {consumables_result[0].antiseptic}\n" \
        + f"–ë—É–º–∞–≥–∞ –æ—Ñ–∏—Å–Ω–∞—è: {consumables_result[0].office_paper}\n" \
        + f"–ú—ã–ª–æ: {consumables_result[0].soap}\n" \
        + f"–¢—Ä—è–ø–∫–∏: {consumables_result[0].rags}\n" \
        + f"–°—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è —É–±–æ—Ä–∫–∏: {consumables_result[0].cleaning_products}\n" \
        + f"–°—Ç–∞–∫–∞–Ω—á–∏–∫–∏: {consumables_result[0].cups}\n" \
        + f"–ß–∞–π: {consumables_result[0].tea_bags}\n" \
        + f"–ö–∞—Ä–∞–Ω–¥–∞—à–∏/—Ñ–ª–æ–º–∞—Å—Ç–µ—Ä—ã: {consumables_result[0].pens}\n" \
        + f"–ú–∞—Ä–∫–µ—Ä—ã: {consumables_result[0].markers}\n" \
        + f"–ö–æ—Ñ–µ: {consumables_result[0].cofee}\n" \
        + f"–ë–∞—Ç–æ–Ω—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ–±–Ω–∏–∫–∞: {consumables_result[0].bars_trial_lesson}" \
    )

    await message.answer(
        text=f"üßπ–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è {message.text} " + \
            f"–±—ã–ª –∑–∞–ø–æ–ª–Ω–µ–Ω {consumables_result[0].date}",
        reply_markup=keyboard_main_menu
    )

    await state.set_state(default_state)


@checklist_router.message(F.text == "üßπ–ó–∞–ø–æ–ª–Ω–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç")
async def start_fill_checklist(message: types.Message, state: FSMContext):
    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç:",
        reply_markup=keyboard_locations_menu
    )
    await state.set_state(FSMFillCheklist.location_choice_state)


@checklist_router.message(
    F.text.in_(locations),
    StateFilter(FSMFillCheklist.location_choice_state)
)
async def process_location(message: types.Message, state: FSMContext):
    await message.answer(
        text="üì∑–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏." +
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ.",
        reply_markup=keyboard_back_menu
    )
    await state.set_state(FSMFillCheklist.upload_photo_state)


@checklist_router.message(StateFilter(FSMFillCheklist.location_choice_state))
async def warning_not_location(message: types.Message):
    await message.answer(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ –≤—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –≤ –º–µ–Ω—é"
    )


# This handler will be triggered if a photo is sent
# and bring it to a state of fill info
@checklist_router.message(
    F.photo[-1].as_("largest_photo"),
    StateFilter(FSMFillCheklist.upload_photo_state)
)
async def process_photo(
    message: types.Message,
    state: FSMContext,
    largest_photo: types.PhotoSize
):
    # Saving the photo data (file_unique_id and file_id) to the storage
    # by the keys "photo_unique_id" and "photo_id"
    # def send info in bd(): pass
    await message.answer(text="–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–∞–∫—É—é-—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
    # Setting the waiting state for the choice of education
    await state.set_state(FSMFillCheklist.fill_info_state)


# This handler will be triggered if while sending a photo
# something incorrect will be entered/sent
@checklist_router.message(StateFilter(FSMFillCheklist.upload_photo_state))
async def warning_not_photo(message: types.Message):
    await message.answer(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ª–æ–∫–∞—Ü–∏–∏"
    )


@checklist_router.message(
    F.text,
    StateFilter(FSMFillCheklist.fill_info_state)
)
async def process_location(message: types.Message, state: FSMContext):
    await message.answer(
        text="–ü–æ–∫–∞ —á—Ç–æ –∫–æ–Ω–µ—Ü FSM –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ–∫-–ª–∏—Å—Ç–∞",
        reply_markup=keyboard_back_menu
    )
    await state.set_state(default_state)
